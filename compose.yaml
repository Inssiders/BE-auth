# == POSTGRES TEMPLATE ==
x-postgres-template: &postgres-template
  image: postgres:latest
  ports: ["${POSTGRES_PORT}:${POSTGRES_PORT}"]
  healthcheck:
    test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
    interval: 3s
    timeout: 3s
    retries: 3

# == SPRING APP TEMPLATE ==
x-app-template: &app-template
  ports: ["${APP_PORT}:${APP_PORT}"]
  healthcheck:
    interval: 3s
    timeout: 3s
    retries: 5
    test: ["CMD", "wget", "--spider", "-q", "http://localhost:${APP_PORT}/actuator/health"]

# == DOCKER COMPOSE ==
services:
  # == NO PROFILE ==
  # .env.example 값이 .env 값을 덮어쓰도록 설정합니다.
  postgres:
    <<: *postgres-template
    env_file: [".env", ".env.example"]

  # == PROFILE: STAGE ==
  # STAGE는 DEV 산출물이 Docker를 기반으로 정상적으로 동작하는지 검증하기 위한 환경입니다.
  # DEV 프로필에서 자동 초기화를 담당해야하며, 이를 바탕으로 빠른 검증이 가능합니다.
  app-stage:
    <<: *app-template
    profiles: [stage]
    build:
      context: .
    env_file: [".env"]
    environment:
      SPRING_PROFILES_ACTIVE: stage
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy

  # == PROFILE: PROD ==
  # PROD는 실제 운영 환경과 동일한 환경입니다.
  # Cold-start 환경에서는 STAGE 프로필에서의 초기화 작업이 선행되어야 합니다.
  # 필요에 따라 `SPRING_PROFILES_ACTIVE`를 변경하여 운영 전략을 수정합니다.
  app:
    <<: *app-template
    profiles: [prod]
    image: oomia/inssider-be-main:${DOCKER_TAG:-latest}
    restart: "on-failure"
    env_file: [".env"]
    environment:
      SPRING_PROFILES_ACTIVE: prod
